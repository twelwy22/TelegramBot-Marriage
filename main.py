import json
import time
from datetime import timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, filters, ContextTypes

CONFIG_FILE = "config.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ config.json
def load_config():
    try:
        with open(CONFIG_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ config.json
def save_config(data):
    with open(CONFIG_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞
def add_marriage(chat_id, user1_id, user2_id):
    data = load_config()

    if chat_id not in data:
        data[chat_id] = []

    data[chat_id].append({
        "users": [user1_id, user2_id],
        "start_time": time.time()
    })
    save_config(data)

# –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–∞–∫–∞
def remove_marriage(chat_id, user1_id, user2_id):
    data = load_config()
    if chat_id not in data:
        return False

    data[chat_id] = [
        marriage for marriage in data[chat_id]
        if set(marriage["users"]) != {user1_id, user2_id}
    ]
    save_config(data)
    return True

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_marriage(chat_id, user_id):
    data = load_config()
    if chat_id not in data:
        return None

    for marriage in data[chat_id]:
        if user_id in marriage["users"]:
            return marriage
    return None

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
def format_duration(seconds):
    delta = timedelta(seconds=int(seconds))
    days = delta.days
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    if days > 0:
        return f"{days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
    return f"{hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = str(update.message.chat_id)
    user = update.message.from_user
    text = update.message.text.lower()

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞
    if text.startswith("–±—Ä–∞–∫") and update.message.reply_to_message:
        partner = update.message.reply_to_message.from_user

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user.id == partner.id:
            await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–ª—é—á–∏—Ç—å –±—Ä–∞–∫ —Å–∞–º–∏ —Å —Å–æ–±–æ–π!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±—Ä–∞–∫
        if get_user_marriage(chat_id, user.id) or get_user_marriage(chat_id, partner.id):
            await update.message.reply_text("–û–¥–∏–Ω –∏–∑ –≤–∞—Å —É–∂–µ –≤ –±—Ä–∞–∫–µ!")
            return

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è üíç", callback_data=f"accept|{user.id}|{partner.id}"),
                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=f"decline|{user.id}|{partner.id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"{partner.mention_html()}, {user.mention_html()} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫! ü•∞",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –±—Ä–∞–∫–æ–≤
    elif text == "–±—Ä–∞–∫–∏":
        data = load_config()
        if chat_id not in data or not data[chat_id]:
            await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –±—Ä–∞–∫–æ–≤.")
            return

        now = time.time()
        marriages = data[chat_id]
        marriages.sort(key=lambda x: now - x["start_time"], reverse=True)
        marriage_list = []
        for i, marriage in enumerate(marriages, 1):
            user1 = await context.bot.get_chat_member(chat_id, marriage["users"][0])
            user2 = await context.bot.get_chat_member(chat_id, marriage["users"][1])
            duration = format_duration(now - marriage["start_time"])
            marriage_list.append(
                f"{i}. {user1.user.mention_html()} + {user2.user.mention_html()} ({duration})"
            )

        await update.message.reply_text("\n".join(marriage_list), parse_mode="HTML")

    # –†–∞–∑–≤–æ–¥
    elif text == "—Ä–∞–∑–≤–æ–¥":
        marriage = get_user_marriage(chat_id, user.id)
        if not marriage:
            await update.message.reply_text("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!")
            return

        partner_id = marriage["users"][0] if marriage["users"][1] == user.id else marriage["users"][1]
        remove_marriage(chat_id, user.id, partner_id)
        partner = await context.bot.get_chat_member(chat_id, partner_id)
        await update.message.reply_text(f"üíî {user.mention_html()} –∏ {partner.user.mention_html()} —Ä–∞–∑–≤–µ–ª–∏—Å—å.", parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data.split("|")
    action, user1_id, user2_id = data[0], int(data[1]), int(data[2])
    chat_id = str(query.message.chat_id)

    if query.from_user.id != user2_id:
        await query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π.", show_alert=True)
        return

    user1 = await context.bot.get_chat_member(chat_id, user1_id)
    user2 = await context.bot.get_chat_member(chat_id, user2_id)

    if action == "accept":
        add_marriage(chat_id, user1_id, user2_id)
        await query.edit_message_text(
            f"üéâ {user1.user.mention_html()} –∏ {user2.user.mention_html()} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ! ü•∞",
            parse_mode="HTML"
        )
    elif action == "decline":
        await query.edit_message_text(
            f"‚ùå {user2.user.mention_html()} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—Ä–∞–∫–∞ –æ—Ç {user1.user.mention_html()}.",
            parse_mode="HTML"
        )

import os
import time
from config import BOT_TOKEN
from init.designations import BOT_OWNER
from init.designations import OWNER_LINK
from init.designations import TELEGRAM_LINK
from init.designations import PROGRAM_LANGUAGE
from rich.console import Console
from rich.table import Table
from rich.text import Text
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, filters

def clear_console():
    """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
    if os.name == 'nt':  # –î–ª—è Windows
        os.system('cls')
    else:  # –î–ª—è Linux, macOS, –∏ –¥—Ä—É–≥–∏—Ö Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        os.system('clear')

def main():
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º
    clear_console()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    bot_info = app.bot.get_me()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
    console = Console()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
    table = Table(show_header=True, header_style="bold magenta")
    table.add_column("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", style="bold blue")
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="bold green")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
    table.add_row("–¢–æ–∫–µ–Ω –±–æ—Ç–∞", Text(BOT_TOKEN, style="bold cyan"))
    table.add_row("–î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞", Text(time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime()), style="bold yellow"))
    table.add_row("–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞", Text(BOT_OWNER, style="bold white"))
    table.add_row("Github", Text(OWNER_LINK, style="bold purple"))
    table.add_row("–ü–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–æ–≤", Text(TELEGRAM_LINK, style="bold magenta"))
    table.add_row("–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", Text(PROGRAM_LANGUAGE, style="bold green"))

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    table.add_row("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", Text("/–±—Ä–∞–∫ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ\n/–±—Ä–∞–∫–∏ ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –±—Ä–∞–∫–æ–≤\n/—Ä–∞–∑–≤–æ–¥ ‚Äî —Ä–∞–∑–≤–æ–¥", style="bold red"))

    # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
    console.print(table)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    console.print("\n–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", style="bold green")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))

    app.run_polling()

if __name__ == "__main__":
    main()
